{"version":3,"sources":["component/Square.js","component/Board.js","component/Game.js","index.js"],"names":["Square","className","this","props","blockState","onClick","value","React","Component","Board","i","key","bingo","e","row","rowSize","size","renderRow","push","renderSquare","renderBoard","renderSquareRow","PlayerScore","player","playerClass","playerScore","Game","allBingo","boardLineSize","Array","fill","map","playerBoard","shuffled_bingo","shuffle","initBingoBoard","state","winnerRule","bingoIndexLookup","initBingoLookup","initState","nextPlayer","initScore","index","winner","find","score","clickedNumber","p","lookupIndex","getBoardLookupIndexByValue","playerBoardState","slice","calculatePlayerScore","setState","gameBoard","squares","scoreClass","handleClick","gameText","t","val","ind","activeBoard","winIndexArray","rowArray","j","colArray","crossLine","crossLine2","computeIndexToScore","length","connect","allbingoIndexLookup","activeArray","old_array","array","Math","floor","random","GameStarter","submitted","game","handleChange","bind","handleSubmit","event","target","name","preventDefault","ActiveGame","onSubmit","type","min","onChange","max","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.91d6f37a.chunk.js","sourcesContent":["import React from 'react';\nimport '../sass/style.sass';\n\nexport default class Square extends React.Component{\n    render() {\n      let className = 'bingoBlock';\n      if(this.props.blockState >= 1) {\n        className += ' bingoClick';\n      }\n      if(this.props.blockState === 2) {\n        className += ' active';\n      }\n      return (\n        <div \n          className={className}\n          onClick={this.props.onClick}> \n          {this.props.value} \n        </div>\n      )\n    }\n  }","import React from 'react';\nimport Square from './Square';\n\nexport default class Board extends React.Component {\n    renderSquare(i) {\n      return(\n          <Square\n            key={''+i}\n            value={this.props.bingo[i]}\n            blockState={this.props.blockState[i]}\n            onClick={(e) => this.props.onClick(e, i)}\n          />\n      )\n    }\n  \n    renderSquareRow(row) {\n      let rowSize = this.props.size;\n      let renderRow = [];\n      for(let i = 0; i < rowSize; i++) {\n        renderRow.push(this.renderSquare(row * rowSize+i));\n      }\n      return renderRow;\n    }\n  \n    render() {\n      const renderBoard = [];\n      for(let row = 0; row < this.props.size; row++) {\n        renderBoard.push((\n          <div className=\"bingoRow\">\n            {this.renderSquareRow(row)}\n          </div>\n        ))\n      }\n      return renderBoard;\n    }\n  }","import React from 'react';\nimport Board from './Board';\n\nfunction PlayerScore(props) {\n    return (\n        <div className='bingoPlayerText'>\n            <span className='playerNumber'>\n                Player #{props.player}\n            </span>\n            <span className={props.playerClass}>\n                {'Score:' + props.playerScore + ' '}\n            </span>\n        </div>\n    )\n}\n\n\nexport default class Game extends React.Component {\n    constructor(props) {\n        super(props);\n        let allBingo = initBingoBoard(this.props.player, this.props.size);\n        this.state = {\n            player: this.props.player,\n            size: this.props.size,\n            winnerRule: this.props.winnerRule,\n            bingo: allBingo,\n            bingoIndexLookup: initBingoLookup(allBingo),\n            blockState: initState(this.props.player, this.props.size),\n            nextPlayer: 0,\n            playerScore: initScore(this.props.player),\n        }\n    }\n\n    getBoardLookupIndexByValue(player, value) {\n        return this.state.bingoIndexLookup[player][value];\n    }\n\n    handleClick(player, index) {\n        const winner = this.state.playerScore.find((score) =>\n            score >= this.state.winnerRule\n        );\n\n        if (player !== this.state.nextPlayer ||\n            this.state.blockState[player][index] >= 1\n            || winner) return;\n\n        const clickedNumber = this.state.bingo[player][index] - 1;\n        const blockState = [];\n        const playerScore = [];\n        for (let p = 0; p < this.state.player; p++) {\n            let lookupIndex = this.getBoardLookupIndexByValue(p, clickedNumber);\n            const playerBoardState = this.state.blockState[p].slice();\n            playerBoardState[lookupIndex] = 1;\n            let score = calculatePlayerScore(playerBoardState, this.state.size);\n            blockState.push(playerBoardState);\n            playerScore.push(score);\n        }\n        this.setState({\n            blockState: blockState,\n            nextPlayer: (this.state.nextPlayer + 1) % this.state.player,\n            playerScore: playerScore,\n        })\n    }\n\n\n    render() {\n\n        const winner = this.state.playerScore.map((score) =>\n            score >= this.state.winnerRule\n        );\n\n        const gameBoard = this.state.bingo.map((squares, player) => {\n            let className = 'bingoBoard';\n            if (winner[player]) {\n                className += ' bingoPlayerWin';\n            }\n            if (player === this.state.nextPlayer && !winner.find(e => e === true)) {\n                className += ' bingoPlayerTurn';\n            }\n\n            let scoreClass = 'playerScore';\n            if (winner[player]) {\n                scoreClass += ' active';\n            }\n\n            return (\n                <div\n                    className={className}>\n                    <PlayerScore\n                        player={player}\n                        playerClass={scoreClass}\n                        playerScore={this.state.playerScore[player]}\n                    />\n                    <Board \n                        key={''+player}\n                        size={this.state.size}\n                        bingo={this.state.bingo[player]}\n                        blockState={this.state.blockState[player]}\n                        onClick={(e, i) => this.handleClick(player, i)}\n                    />\n                </div>\n            )\n        })\n\n        let gameText = 'Next player ' + this.state.nextPlayer;\n        if (winner.find(t => t === true)) {\n            gameText = 'Congrats!! Winner: player ';\n            // eslint-disable-next-line array-callback-return\n            winner.map((val, ind) => {\n                if (val === true) {\n                    gameText += '#' + ind + ' ';\n                }\n            })\n        }\n\n\n        return (\n            <div className=\"game\">\n                <h1>{gameText}</h1>\n                {gameBoard}\n            </div>\n        )\n    }\n}\n\n\nfunction calculatePlayerScore(activeBoard, boardLineSize) {\n    const winIndexArray = computeIndexToScore(boardLineSize);\n    let score = 0;\n    for (let i = 0; i < winIndexArray.length; i++) {\n        let connect = true;\n        for (const j of winIndexArray[i]) {\n            connect &= (activeBoard[j] >= 1 ? true : false);\n        }\n        if (connect) {\n            score++;\n            for (const j of winIndexArray[i]) {\n                activeBoard[j] = 2;\n            }\n        }\n    }\n    return score;\n}\n\nfunction computeIndexToScore(boardLineSize) {\n    let winIndexArray = [];\n    // row\n    for (let i = 0; i < boardLineSize; i++) {\n        let rowArray = [];\n        for (let j = 0; j < boardLineSize; j++) {\n            rowArray.push(i * boardLineSize + j);\n        }\n        winIndexArray.push(rowArray);\n    }\n\n    // col\n    for (let i = 0; i < boardLineSize; i++) {\n        let colArray = [];\n        for (let j = 0; j < boardLineSize; j++) {\n            colArray.push(j * boardLineSize + i);\n        }\n        winIndexArray.push(colArray);\n    }\n\n    // cross line\n    let crossLine = [];\n    for (let i = 0; i < boardLineSize; i++) {\n        crossLine.push(i + boardLineSize * i);\n    }\n    winIndexArray.push(crossLine);\n\n    let crossLine2 = [];\n\n    for (let i = 0; i < boardLineSize; i++) {\n        crossLine2.push((boardLineSize - 1) + (boardLineSize - 1) * i);\n    }\n    winIndexArray.push(crossLine2);\n\n    return winIndexArray;\n}\n\nfunction initScore(player) {\n    let playerScore = new Array(player).fill(0);\n    for (let i = 0; i < player; i++) playerScore[i] = 0;\n    return playerScore;\n}\n\nfunction initBingoBoard(player, boardLineSize) {\n    let bingo = Array(boardLineSize * boardLineSize).fill(0)\n        .map((e, i) => i + 1);\n    const playerBoard = [];\n    for (let i = 0; i < player; i++) {\n        const shuffled_bingo = shuffle(bingo);\n        playerBoard.push(shuffled_bingo);\n    }\n    return playerBoard;\n}\nfunction initBingoLookup(allBingo) {\n    const allbingoIndexLookup = [];\n    for (let i = 0; i < allBingo.length; i++) {\n        const bingo = allBingo[i].slice();\n        const bingoIndexLookup = [];\n        for (let j = 0; j < allBingo[i].length; j++) {\n            bingoIndexLookup[bingo[j] - 1] = j;\n        }\n        allbingoIndexLookup.push(bingoIndexLookup);\n    }\n    return allbingoIndexLookup;\n}\nfunction initState(player, boardLineSize) {\n    let blockState = Array(boardLineSize * boardLineSize).fill(0);\n    let activeArray = [];\n    for (let i = 0; i < player; i++) {\n        activeArray.push(blockState);\n    }\n    return activeArray;\n}\n\nfunction shuffle(old_array) {\n    const array = old_array.slice();\n    for (let i = array.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n\n    return array;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './sass/style.sass';\nimport Game from './component/Game';\n\nclass GameStarter extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      player: this.props.player,\n      size: this.props.size,\n      winnerRule: this.props.winnerRule,\n      submitted: false,\n      game: () => <Game \n        size={this.state.size} \n        player={this.state.player} \n        winnerRule={this.state.winnerRule}\n        />\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value,\n    })\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.setState({\n      game: () => <Game \n      size={this.state.size} \n      player={this.state.player} \n      winnerRule={this.state.winnerRule}\n      />\n    })\n  }\n\n  render() {\n    const ActiveGame = this.state.game;\n    return (\n      <div>\n      <form onSubmit={this.handleSubmit}>\n      <label>\n          Player Number:\n          <input\n            name=\"player\"\n            type=\"number\"\n            min=\"1\"\n            value={this.state.player}\n            onChange={this.handleChange} />\n        </label>        \n        <label>\n          Borad Line Size: \n          <input\n            name=\"size\"\n            type=\"number\"\n            min=\"1\"\n            value={this.state.size}\n            onChange={this.handleChange} />\n        </label>        \n        <label>\n          {'Winner Score ( 1 ~ ' + (this.state.size*2 + 2) + ' )'}: \n          <input\n            name=\"winnerRule\"\n            type=\"number\"\n            min=\"1\"\n            max={(this.state.size*2 + 2)}\n            value={this.state.winnerRule}\n            onChange={this.handleChange} />\n        </label>\n        <input className='submitButton' type=\"submit\" value=\"Start New Game\"/>\n      </form>        \n      {\n        <ActiveGame/>\n      }\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <GameStarter size={5} player={2} winnerRule={3}/>,\n  document.getElementById('root')\n);\n\n\n\n\n\n"],"sourceRoot":""}