{"version":3,"sources":["index.js"],"names":["Square","className","this","props","blockState","onClick","value","React","Component","Board","player","i","bingo","row","rowSize","size","renderRow","push","renderSquare","renderBoard","renderSquareRow","Game","allBingo","boardLineSize","Array","fill","map","e","playerBoard","shuffled_bingo","shuffle","initBingoBoard","state","bingoIndexLookup","initBingoLookup","initState","nextPlayer","playerScore","initScore","index","winner","find","score","winnerRule","clickedNumber","p","lookupIndex","getBoardLookupIndexByValue","playerBoardState","slice","calculatePlayerScore","setState","gameBoard","squares","scoreClass","handleClick","gameText","t","val","ind","GameStarter","submitted","handleChange","bind","handleSubmit","event","target","name","preventDefault","onSubmit","type","onChange","old_array","array","length","j","Math","floor","random","allbingoIndexLookup","activeArray","activeBoard","winIndexArray","rowArray","colArray","crossLine","crossLine2","getWinIndex","connect","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ff92d1eb.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './sass/style.sass';\r\n\r\nclass Square extends React.Component{\r\n  render() {\r\n    let className = 'bingoBlock';\r\n    if(this.props.blockState >= 1) {\r\n      className += ' bingoClick';\r\n    }\r\n    if(this.props.blockState === 2) {\r\n      className += ' active';\r\n    }\r\n    return (\r\n      <div \r\n      className={className}\r\n      onClick={() => this.props.onClick()}> \r\n        {this.props.value} \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(player, i) {\r\n    return(\r\n        <Square\r\n          value={this.props.bingo[i]}\r\n          blockState={this.props.blockState[i]}\r\n          onClick={() => this.props.onClick(player, i)}\r\n        />\r\n    )\r\n  }\r\n\r\n  renderSquareRow(player, row) {\r\n    let rowSize = this.props.size;\r\n    let renderRow = [];\r\n    for(let i = 0; i < rowSize; i++) {\r\n      renderRow.push(this.renderSquare(player, row * rowSize+i));\r\n    }\r\n    return(renderRow)\r\n  }\r\n\r\n  render() {\r\n    const renderBoard = [];\r\n    for(let row = 0; row < this.props.size; row++) {\r\n      renderBoard.push((\r\n        <div className=\"bingoRow\">\r\n          {this.renderSquareRow(this.props.player, row)}\r\n        </div>\r\n      ))\r\n    }\r\n    return(\r\n      renderBoard\r\n    )\r\n  }\r\n}\r\n\r\nclass Game extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n    let allBingo = initBingoBoard(this.props.player, this.props.size);\r\n    this.state = {\r\n      bingo: allBingo,\r\n      bingoIndexLookup: initBingoLookup(allBingo),\r\n      blockState: initState(this.props.player, this.props.size),\r\n      nextPlayer: 0,\r\n      playerScore: initScore(this.props.player),\r\n    }\r\n  }\r\n\r\n  getBoardLookupIndexByValue(player, value) {\r\n    return this.state.bingoIndexLookup[player][value];\r\n  }\r\n\r\n  handleClick(player, index) {\r\n\r\n    const winner = this.state.playerScore.find((score) => \r\n      score >= this.props.winnerRule\r\n    );\r\n\r\n\r\n    if(player !== this.state.nextPlayer || \r\n      this.state.blockState[player][index] >= 1\r\n      || winner) return;\r\n\r\n    const clickedNumber = this.state.bingo[player][index] - 1;\r\n    const blockState = [];\r\n    const playerScore = [];\r\n    for(let p = 0; p < this.props.player; p++) {\r\n      let lookupIndex = this.getBoardLookupIndexByValue(p, clickedNumber);\r\n      const playerBoardState = this.state.blockState[p].slice();\r\n      playerBoardState[lookupIndex] = 1;\r\n      let score = calculatePlayerScore(playerBoardState, this.props.size);\r\n      blockState.push(playerBoardState);\r\n      playerScore.push(score);\r\n    }\r\n    this.setState({\r\n      blockState: blockState,\r\n      nextPlayer: (this.state.nextPlayer + 1) % this.props.player,\r\n      playerScore: playerScore,\r\n    })\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    const winner = this.state.playerScore.map((score) => \r\n      score >= this.props.winnerRule\r\n    );\r\n\r\n    const gameBoard = this.state.bingo.map((squares, player) => {\r\n      let className = 'bingoBoard';\r\n      if(winner[player]) {\r\n        className += ' bingoPlayerWin';\r\n      }\r\n      if(player === this.state.nextPlayer && !winner.find(e => e === true)) {\r\n        className += ' bingoPlayerTurn';\r\n      }\r\n\r\n      let scoreClass = 'playerScore';\r\n      if(winner[player]) {\r\n        scoreClass += ' active';\r\n      }\r\n\r\n      return(\r\n        <div className={className}>\r\n          <div className='bingoPlayerText'>\r\n            <span className='playerNumber'>\r\n              Player #{player}\r\n            </span>\r\n            <span className={scoreClass}>\r\n              {'Score:' + this.state.playerScore[player] +  ' '}\r\n            </span>\r\n          </div>\r\n          <Board \r\n          size={this.props.size}\r\n          bingo={this.state.bingo[player]}\r\n          blockState={this.state.blockState[player]}\r\n          onClick={(e, i) => this.handleClick(player, i)}\r\n          />\r\n        </div>\r\n      )\r\n    })\r\n\r\n    let gameText = 'Next player ' + this.state.nextPlayer;\r\n    if(winner.find(t=> t === true)) {\r\n      gameText = 'Congrats!! Winner: player ';\r\n      winner.map((val, ind) => {\r\n        if(val === true) gameText += '#' + ind + ' ';\r\n      })\r\n    }\r\n\r\n\r\n    return(\r\n      <div className=\"game\">\r\n        <h1>{gameText}</h1>\r\n        {gameBoard}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass GameStarter extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      player: this.props.player,\r\n      size: this.props.size,\r\n      winnerRule: this.props.winnerRule,\r\n      submitted: false\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    })\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    this.setState({\r\n      submitted: true,\r\n    })\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n      <form onSubmit={this.handleSubmit}>\r\n      <label>\r\n          Player Number:\r\n          <input\r\n            name=\"player\"\r\n            type=\"number\"\r\n            value={this.state.player}\r\n            onChange={this.handleChange} />\r\n        </label>        \r\n        <label>\r\n          Borad Line Size: \r\n          <input\r\n            name=\"size\"\r\n            type=\"number\"\r\n            value={this.state.size}\r\n            onChange={this.handleChange} />\r\n        </label>        \r\n        <label>\r\n          {'Winner Score ( <= ' + (this.state.size*2 + 2) + ' )'}: \r\n          <input\r\n            name=\"winnerRule\"\r\n            type=\"number\"\r\n            value={this.state.winnerRule}\r\n            onChange={this.handleChange} />\r\n        </label>\r\n        <input className='submitButton' type=\"submit\" value=\"Submit\"/>\r\n      </form>        \r\n      {this.state.submitted && <Game \r\n        size={this.state.size} \r\n        player={this.state.player} \r\n        winnerRule={this.state.winnerRule}\r\n        />\r\n      }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(\r\n  <GameStarter size={5} player={2} winnerRule={3}/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\nfunction shuffle(old_array) {\r\n  const array = old_array.slice();\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    let j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\nfunction initBingoBoard(player, boardLineSize) {\r\n  let bingo = Array(boardLineSize * boardLineSize).fill(0)\r\n              .map((e, i) => i + 1);\r\n  const playerBoard = [];\r\n  for(let i = 0; i < player; i++) {\r\n    const shuffled_bingo = shuffle(bingo);\r\n    playerBoard.push(shuffled_bingo);\r\n  }\r\n  return playerBoard;\r\n}\r\nfunction initBingoLookup(allBingo) {\r\n  const allbingoIndexLookup = [];\r\n  for(let i = 0; i < allBingo.length; i++) {\r\n    const bingo = allBingo[i].slice();\r\n    const bingoIndexLookup = [];\r\n    for(let j = 0; j < allBingo[i].length; j++) {\r\n      bingoIndexLookup[bingo[j] - 1] = j;\r\n    }\r\n    allbingoIndexLookup.push(bingoIndexLookup);\r\n  }\r\n  return allbingoIndexLookup;\r\n}\r\nfunction initState(player, boardLineSize) {\r\n  let blockState = Array(boardLineSize*boardLineSize).fill(0);\r\n  let activeArray = [];\r\n  for(let i = 0; i < player; i++) {\r\n    activeArray.push(blockState);\r\n  }\r\n  return activeArray;\r\n}\r\n\r\nfunction getWinIndex(boardLineSize) {\r\n  let winIndexArray = [];\r\n  // row\r\n  for(let i = 0; i < boardLineSize; i++) {\r\n    let rowArray = [];\r\n    for(let j = 0; j < boardLineSize; j++) {\r\n      rowArray.push(i * boardLineSize + j);\r\n    }\r\n    winIndexArray.push(rowArray);\r\n  }\r\n\r\n  // col\r\n  for(let i = 0; i < boardLineSize; i++) {\r\n    let colArray = [];\r\n    for(let j = 0; j < boardLineSize; j++) {\r\n      colArray.push(j * boardLineSize + i);\r\n    }\r\n    winIndexArray.push(colArray);\r\n  }\r\n\r\n  // cross line\r\n  let crossLine = [];\r\n  for(let i = 0; i < boardLineSize; i++) {\r\n    crossLine.push(i + boardLineSize * i);\r\n  }\r\n  winIndexArray.push(crossLine);\r\n\r\n  let crossLine2 = [];\r\n\r\n  for(let i = 0; i < boardLineSize; i++) {\r\n    crossLine2.push((boardLineSize - 1) + (boardLineSize - 1) * i);\r\n  }\r\n  winIndexArray.push(crossLine2);\r\n\r\n  return winIndexArray;\r\n}\r\n\r\nfunction calculatePlayerScore(activeBoard, boardLineSize) {\r\n  const winIndexArray = getWinIndex(boardLineSize);\r\n  let score = 0;\r\n  for(let i = 0; i < winIndexArray.length; i++) {\r\n    let connect = true;\r\n    for(const j of winIndexArray[i]) {\r\n      connect &= (activeBoard[j] >= 1? true: false);\r\n    }\r\n    if(connect) {\r\n      score++;\r\n      for(const j of winIndexArray[i]) {\r\n        activeBoard[j] = 2;\r\n      }\r\n    }\r\n  }\r\n  return score;\r\n}\r\n\r\nfunction initScore(player) {\r\n  let playerScore = new Array(player).fill(0);\r\n  for(let i = 0; i < player; i++) playerScore[i] = 0;\r\n  return playerScore;\r\n}"],"sourceRoot":""}